class LinkedList {
   Node head;
   Node tail;
   
   public LinkedList() {
      head = null;
      tail = null;
   }
   
   public LinkedList(Node head, Node tail) {
      this.head = head;
      this.tail = tail;
   }
   
   public boolean isEmpty() {
      return (head == null && tail == null);
   }
   
   public void addToHead(int item) {
      if (isEmpty()) {
         Node newNode = new Node(null, item, null);
         head = tail = newNode;
      } else {
         Node newNode = new Node(null, item, head);
         head = newNode;
         head.next.previous = head;
      }
   }
   
   public void addToTail(int item) {
      if (isEmpty()) {
         Node newNode = new Node(null, item, null);
         head = tail = newNode;
      } else {
         Node newNode = new Node(tail, item, null);
         tail = newNode;
         tail.previous.next = tail;
      }
   }
   
   public void printForward() {
      Node current = head;
      while (current != null) {
         System.out.println(current.item);
         current = current.next;
      }
   }
   
   public void printBackward() {      
      Node current = tail;
      while (current != null) {
         System.out.println(current.item);
         current = current.previous;
      }
   }
   
   
   // new methods for remove head & tail
   public void removeHead() {
      if (!isEmpty()) {
         if (head == tail) {
            head = tail = null;
         } else {
            head = head.next;
            head.previous = null;
       }
      }
   }
   
   
   public void removeTail() {
      if (!isEmpty()) {
         if (head == tail) {
            head = tail = null;
         } else {
            tail = tail.previous;
            tail.next = null;
         }
      }
   }
public void insertAtPosition(int item, int position) {
   if (position < 0) {
      System.out.println("Invalid position. Position must be non-negative.");
      return;
   }
   
   if (position == 0) {
      // Insert at the head.
      addToHead(item);
      return;
   }
   
   Node newNode = new Node(null, item, null);
   Node current = head;
   int currentPosition = 0;
   
   while (current != null) {
      if (currentPosition == position - 1) {
         // Insert the new node after 'current'.
         newNode.previous = current;
         newNode.next = current.next;
         
         if (current == tail) {
            // If 'current' is the tail, update 'tail'.
            tail = newNode;
         } else {
            // If 'current' is not the tail, update the next node's previous reference.
            current.next.previous = newNode;
         }
         
         current.next = newNode;
         return;
      }
      
      currentPosition++;
      current = current.next;
   }
   
   // If the specified position is out of range, you can handle it here.
   System.out.println("Invalid position. Position is out of range.");
}

   
}

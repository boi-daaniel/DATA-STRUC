class LinkedList {
   Node head;
   Node tail;
   
   public LinkedList() {
      head=null;
      tail=null;
   }
   
   public boolean isEmpty() {
      if(head==null && tail==null)
         return true;
      else
         return false;
   }
   
   public void addToHead(int item) {
      if(isEmpty()) {
         Node newNode = new Node(null, item, null);
         head=tail=newNode;
      } else{
            Node newNode = new Node(null, item, head);
            head=newNode;
            head.next.previous=head;
      }
   }
   
   public void addToTail(int item) {
      if(isEmpty()) {
         Node newNode = new Node(null, item, null);
         head=tail=newNode;
      } else{
            Node newNode = new Node(tail, item, null);
            tail = newNode;
            tail.previous.next = tail;

      }
   }
   
   public void printForward() {
      System.out.println("Forward:");
      Node current;
      current=head;
      while (current!=null) {
         System.out.println(current.item);
         current=current.next;
      }
   }
   
    public void printBackward() {
      System.out.println("Backward:");
      Node current;
      current=tail;
      while (current!=null) {
         System.out.println(current.item);
         current=current.previous;
      }
   }
   
   // Remove head
   public void removeHead() {
      if (!isEmpty()) {
         if (head == tail) {
            head = tail = null;
         } else {
            head = head.next;
            head.previous = null;
       }
      }
   }
    
   // Remova tail
   public void removeTail() {
      if (!isEmpty()) {
         if (head == tail) {
            head = tail = null;
         } else {
            tail = tail.previous;
            tail.next = null;
         }
      }
   }
   
   // Remove at
   public void removeAt(int position) {
        if (position < 0 || position >= size()) {
            System.out.println("Invalid position.");
            return;
        }

        if (position == 0) {
            removeHead();
        } else if (position == size() - 1) {
            removeTail();
        } else {
            Node current = head;
            for (int i = 0; i < position; i++) {
                current = current.next;
            }
            current.previous.next = current.next;
            current.next.previous = current.previous;
        }
        System.out.println("Node at position " + position + " removed.");
    }
    
    public int size() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }
   
   // Insert method
   public void insertNodeAfter(int searchItem, int itemToBeInserted) {
        Node newNode = new Node(null, itemToBeInserted, null);
        Node temp = head;

        while (temp != null && temp.item != searchItem) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("item not found.");
        } else {
            newNode.next = temp.next;
            temp.next = newNode;
            newNode.previous = temp;
            if (newNode.next != null) {
                newNode.next.previous = newNode;
            } else {
                tail = newNode;
              }
          }       
    }
        
}// Class

// TEST

import java.util.Scanner;

class TestLinkedList {
   public static void main(String[] args) {
      LinkedList list = new LinkedList();
      Scanner input = new Scanner(System.in);
    
      while(true) {
         System.out.println("\n\t MENU");
         System.out.println("1. Add to Head");
         System.out.println("2. Add to Tail");
         System.out.println("3. Print Head");
         System.out.println("4. print Tail");
         System.out.println("5. Print Forward");
         System.out.println("6. Print Backward");
         System.out.println("7. Remove from Head");
         System.out.println("8. Remove from Tail");
         System.out.println("9. Remove At");
         System.out.println("10. Insert At");
         System.out.println("11. Quit");
         
         
         System.out.print("\nEnter Choice: ");
         int choice = input.nextInt();
         
         switch(choice) {
            case 1:
               System.out.print("Add to head: ");
               int headValue = input.nextInt(); 
               list.addToHead(headValue);
               System.out.println("Head Added.");
               break;
            case 2:
               System.out.print("Add to tail: ");
               int tailValue = input.nextInt(); 
               list.addToTail(tailValue);
               System.out.println("Tail Added.");
               break;
            case 3:
               if (list.isEmpty()) {
                  System.out.println("List is empty.");
               } else {
                  System.out.println("Head value: " + list.head.item);
               }
               break;
            case 4:
               if (list.isEmpty()) {
                  System.out.println("List is empty.");
               } else {
                  System.out.println("Tail value: " + list.tail.item);
               }
               break;
            case 5:
               if (list.isEmpty()) {
                  System.out.println("List is empty.");
               } else {
                  System.out.println("Printing Forward list:");
                  list.printForward();
               }
               break;
            case 6:
               if (list.isEmpty()) {
                  System.out.println("List is empty.");
               } else {
                  System.out.println("Printing Backward list:");
                  list.printBackward();
               }
               break;
            case 7:
               if(list.isEmpty()){
                  System.out.println("List is empty cannot remove head");
               } else {
                  System.out.println("Head removed.");
                  list.removeHead();
               } 
               break;
            case 8:
               if(list.isEmpty()) {
                  System.out.println("List is empty cannot remove tail");
               } else {
                  System.out.println("Tail removed.");
                  list.removeTail();
               }
               break;
            case 9:
               System.out.print("Enter position to remove: ");
               int removePosition = input.nextInt();
               list.removeAt(removePosition);
               break;
            case 10:
               System.out.print("Enter the value to be inserted: ");
               int insertValue = input.nextInt();
               System.out.print("Enter the value after which to insert: ");
               int searchValue = input.nextInt();
               list.insertNodeAfter(searchValue, insertValue);         
               break;
            case 11:
               System.out.println("Exiting program ...");
               input.close();
               System.exit(0);
               break;
            default:
               System.out.println("Invalid choice");
         }
      }
      
      
   }//MAIN
}//CLASS
